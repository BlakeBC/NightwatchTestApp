# Azure DevOps Pipeline for Asteroids Nightwatch Tests
# This pipeline runs the Nightwatch E2E test suite on multiple browsers

trigger:
  branches:
    include:
      - main
      - master
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main
      - master
      - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  NODE_VERSION: '18.x'
  CHROME_VERSION: 'stable'

stages:
  - stage: Build
    displayName: 'Build and Prepare'
    jobs:
      - job: Setup
        displayName: 'Setup Environment'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - script: |
              node --version
              npm --version
            displayName: 'Display Node/npm versions'

          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(Pipeline.Workspace)/.npm

          - script: |
              npm ci --cache $(Pipeline.Workspace)/.npm
            displayName: 'Install dependencies'

          - script: |
              # Install Chrome
              wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              sudo apt-get update
              sudo apt-get install -y google-chrome-stable

              # Display Chrome version
              google-chrome --version
            displayName: 'Install Chrome browser'

          - script: |
              # Install Firefox
              sudo apt-get install -y firefox
              firefox --version
            displayName: 'Install Firefox browser'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
      - job: NightwatchTests
        displayName: 'Nightwatch E2E Tests'
        strategy:
          matrix:
            Chrome:
              BROWSER: 'chrome'
              TEST_COMMAND: 'npm run test:chrome'
            ChromeHeadless:
              BROWSER: 'chrome.headless'
              TEST_COMMAND: 'npm run test:headless'
            Firefox:
              BROWSER: 'firefox'
              TEST_COMMAND: 'npm run test:firefox'
        steps:
          - task: NodeTool@0
            displayName: 'Use Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(Pipeline.Workspace)/.npm

          - script: |
              npm ci --cache $(Pipeline.Workspace)/.npm
            displayName: 'Install dependencies'

          - script: |
              # Start the application server in background
              npm start &
              SERVER_PID=$!
              echo "Server started with PID: $SERVER_PID"

              # Wait for server to be ready
              sleep 5

              # Check if server is running
              curl -f http://localhost:8080 || exit 1

              # Save PID for cleanup
              echo $SERVER_PID > server.pid
            displayName: 'Start application server'

          - script: |
              # Set display for headless testing
              export DISPLAY=:99.0

              # Run Nightwatch tests
              $(TEST_COMMAND)
            displayName: 'Run Nightwatch tests - $(BROWSER)'
            continueOnError: true

          - script: |
              # Stop the server
              if [ -f server.pid ]; then
                kill $(cat server.pid) || true
                rm server.pid
              fi
            displayName: 'Stop application server'
            condition: always()

          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/tests_output/*.xml'
              testRunTitle: 'Nightwatch Tests - $(BROWSER)'
            condition: always()

          - task: PublishPipelineArtifact@1
            displayName: 'Publish screenshots'
            inputs:
              targetPath: 'tests_output/screenshots'
              artifact: 'screenshots-$(BROWSER)'
              publishLocation: 'pipeline'
            condition: failed()

  - stage: Report
    displayName: 'Test Report'
    dependsOn: Test
    condition: always()
    jobs:
      - job: GenerateReport
        displayName: 'Generate Test Report'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download test artifacts'
            inputs:
              buildType: 'current'
              targetPath: '$(Pipeline.Workspace)/artifacts'
            continueOnError: true

          - script: |
              echo "========================================"
              echo "         TEST EXECUTION SUMMARY         "
              echo "========================================"
              echo ""
              echo "Pipeline: $(Build.DefinitionName)"
              echo "Build: $(Build.BuildNumber)"
              echo "Branch: $(Build.SourceBranchName)"
              echo "Commit: $(Build.SourceVersion)"
              echo ""
              echo "Test Results:"
              echo "- Chrome: Check test results tab"
              echo "- Chrome Headless: Check test results tab"
              echo "- Firefox: Check test results tab"
              echo ""
              echo "Screenshots (if any failures): Available as pipeline artifacts"
              echo "========================================"
            displayName: 'Display test summary'

# Pipeline Features:
# - Multi-browser testing (Chrome, Chrome Headless, Firefox)
# - Parallel test execution
# - Test result publishing
# - Screenshot capture on failures
# - npm package caching for faster builds
# - Automatic server start/stop
# - Support for PR validation